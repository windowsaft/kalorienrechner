name: Release Docker image on "release:" commit

on:
  push:
    branches: [ master ]
    # Only run if commit message starts with `release:`
    # We'll do a manual check in a step as well
    paths-ignore:
      - 'README.md'
      - '.github/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Get Last Commit Message
        id: get_message
        shell: bash
        run: echo "message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

      - name: Read Version from deno.json
        if: "startsWith(steps.get_message.outputs.message, 'release: ')"
        id: get_version
        run: |
          VERSION=$(cat deno.json | jq -r .version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Tag the Commit
        if: "startsWith(steps.get_message.outputs.message, 'release: ')"
        id: tag_version
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: v${{ steps.get_version.outputs.version }}
        run: |
          echo "Tagging commit with $VERSION"
          
          # Create the version tag
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag $VERSION $GITHUB_SHA
          
          # Push the tag
          git push origin "$VERSION"

      - name: Log in to the Container registry
        uses: docker/login-action@3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: "startsWith(steps.get_message.outputs.message, 'release: ')"
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          load: false  # We don't need to load it locally, only push

      - name: Create GitHub Release
        if: "startsWith(steps.get_message.outputs.message, 'release: ')"
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.get_version.outputs.version }}
          name: ðŸŽ‰ New Version ${{ steps.get_version.outputs.version }} Released!
          body: "Release of version v${{ steps.get_version.outputs.version }}"
          draft: false
          prerelease: false
          #artifacts:
